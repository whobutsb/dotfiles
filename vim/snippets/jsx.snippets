snippet react
	import React, { Component } from 'react';

	class ${1:name} extends Component {

	  render() {
		return (
		);
	  }
	}

	export default ${1:name};

snippet cdm
	componentDidMount() {
		${1}
	}
snippet cdup
	componentDidUpdate(prevProps, prevState) {
		${1}
	}
snippet cwm
	componentWillMount() {
		${1}
	}
snippet cwr
	componentWillReceiveProps(nextProps) {
		${1}
	}
snippet cwun
	componentWillUnmount() {
		${1}
	}
snippet cwu
	componentWillUpdate(nextProps, nextState) {
		${1}
	}
snippet fup
	forceUpdate(${1:callback});
snippet jsx
	import React, { Component, PropTypes } from 'react';

	class ${0:ClassName} extends Component {
		render(){
			return(
				<div>${1}</div>
			);
		}
	}

	export default ${0:ClassName};
snippet pt
	propTypes: {
		${1}: React.PropTypes.${2:string}
	}
snippet ren
	render() {
		return (
			${1:<div />}
		);
	}
snippet sst
	this.state({
		${1}: ${2}
	});
snippet scu
	shouldComponentUpdate(nextProps, nextState) {
		${1}
	}
snippet props
	this.props.${1}
snippet state
	this.state.${1}
snippet redux
	import React, { Component, PropTypes } from 'react';
	import { connect } from 'react-redux';
	import { bindActionCreators } from 'redux';
	import * as appActions from './actions/app-actions';

	import './css/App.css';

	class ${0:ClassName} extends Component {

		render(){
			return (
				<div className="${0:ClassName}">

				</div>
			);
		}
	}

	function mapStateToProps(state, props){
		return {
			app: state.app
		}
	}

	function mapDispatchToProps(dispatch){
		return {
			actions: bindActionCreators(appActions, dispatch)
		}
	}

	export default connect(mapStateToProps, mapDispatchToProps)(${0:ClassName});
snippet dispatch
	return (dispatch, getState) => {
		let state = getState();
		${1}
	};
